/** 
 Converts a specified number to an array of digits
 */
function numToDigits(num: number): number[] {
    let array = [];
    let number = num.toString();
    for (let i = 0; i < number.length; i++) {
        array[i] = parseInt(number[i]);
    }
    return array;
}

function splitNumberToArray(num: number): number[] {
    let array = [];
    while (Math.floor(num) !== 0) {
        let digit = num % 10;
        array.unshift(digit);
        num = Math.floor(num / 10);
    }
    return array;
}

let num: number = 123;
console.log(numToDigits(num)); // [1, 2, 3]
console.log(splitNumberToArray(num)); // [1, 2, 3]

/** 
 Removes non-printable ASCII characters from a given string
 */
function removeASCII(str: string): string {
    return str.replace(/[^\x20-\x7E]/g, '');
}

console.log(removeASCII('Hello\x00World\x07!')); // 'HelloWorld!'

/** 
 Write a function that returns true if the provided predicate function
 returns true for all elements in a collection, false otherwise
 */
function allMatch(arr: number[], predicate: (num: number) => boolean): boolean {
    for (let i = 0; i < arr.length; i++) {
        if (!predicate(arr[i])) {
            return false;
        }
    }
    return true;
}

function applyPredicateToArray(arr: number[], predicate: (num: number) => boolean): boolean {
    return allMatch(arr, predicate);
}

function isPositiveNumber(num: number): boolean {
    return num > 0;
}

let numArray1: number[] = [1, 2, 3, 4, 5, 6];
let numArray2: number[] = [-1, 2, 3, -6];

console.log(applyPredicateToArray(numArray1, isPositiveNumber)); // true
console.log(applyPredicateToArray(numArray2, isPositiveNumber)); // false

/** 
 To Capitalize the first letter of a string
 */
function capitalize(str: string): string {
    if (str.length === 0) return str;
    return str.charAt(0).toUpperCase() + str.slice(1);
}

console.log(capitalize('hello')); // 'Hello'

/** 
 To create an object with keys generated by running the
 provided function for each key and the same values as the
 provided object
 */
function generateKey(key: string): string {
    return 'new_' + key;
}

const originalObj: { [key: string]: string } = {
    key1: 'value1',
    key2: 'value2',
    key3: 'value3'
};

const newObj = Object.fromEntries(
    Object.entries(originalObj).map(([key, value]) => [
        generateKey(key),
        value
    ])
);

console.log(newObj); // { new_key1: 'value1', new_key2: 'value2', new_key3: 'value3' }

/** 
 Create a function that invokes each provided function with the
 arguments it receives and returns the results
 */
function callFunctions<T>(args: any[], ...fns: ((...args: any[]) => T)[]): T[] {
    return fns.map(fn => fn(...args));
}

function sum(a: number, b: number): number {
    return a + b;
}

function product(a: number, b: number): number {
    return a * b;
}

console.log(callFunctions([3, 4], sum, product)); // [7, 12]

/** 
 Create an object from the given key-value pairs
 */
const keyArray: string[] = ['name', 'age', 'gender'];
const valueArray: (string | number)[] = ['Karthik', 23, 'Male'];

const resultObj: { [key: string]: string | number } = Object.fromEntries(keyArray.map((key, index) => [key, valueArray[index]]));

console.log(resultObj); // { name: 'Karthik', age: 23, gender: 'Male' }

/** 
 To Join all given URL segments together, then normalizes the
 resulting URL.
 */
function normalizeUrl(segments: string[]): URL {
    const base = 'https://example.com';
    const url = new URL(base);
    url.pathname = segments.join('/');
    return new URL(url.href); 
}

const finalUrl = normalizeUrl('path', 'to', 'resource');
console.log(finalUrl.href); 

/** 
 To compute the average of an array, after mapping each element to
 a value using the provided function
 */
function mapAndAverage<T>(arr: T[], mapFn: (item: T) => number): number {
    let sum = 0;
    let count = 0;

    for (const item of arr) {
        const mappedValue = mapFn(item);
        sum += mappedValue;
        count++;
    }

    return sum / count;
}

const nums = [1, 2, 3, 4, 5];
const avg = mapAndAverage(nums, (num) => num * 2);
console.log(avg); // 6

/** 
  To add special characters to text to print in color in the console
  (combined with console.log())
 */
const RED_COLOR = '\x1b[31m';
const GREEN_COLOR = '\x1b[32m';
const RESET_COLOR = '\x1b[0m';

function printColoredText(text: string, color: 'red' | 'green'): void {
    let colorCode;
    switch (color) {
        case 'red':
            colorCode = RED_COLOR;
            break;
        case 'green':
            colorCode = GREEN_COLOR;
            break;
        default:
            colorCode = '';
    }
    console.log(`${colorCode}${text}${RESET_COLOR}`);
}

printColoredText('Hello, world!', 'red'); // Red text
printColoredText('This is green text.', 'green'); // Green text
